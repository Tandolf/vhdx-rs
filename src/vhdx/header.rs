#![allow(dead_code)]
use crate::DeSerialise;

use super::{fti::FileTypeIdentifier, headers::Headers, region_table::RTHeader};

pub const SECTION_SIZE: usize = 64000;

#[derive(Debug)]
pub struct Header {
    fti: FileTypeIdentifier,
    header_1: Headers,
    header_2: Headers,
    rt_1: RTHeader,
    rt_2: RTHeader,
}
impl Header {
    fn new(
        fti: FileTypeIdentifier,
        header_1: Headers,
        header_2: Headers,
        rt_1: RTHeader,
        rt_2: RTHeader,
    ) -> Self {
        Self {
            fti,
            header_1,
            header_2,
            rt_1,
            rt_2,
        }
    }
}

impl<'a> DeSerialise<'a> for Header {
    type Item = (&'a [u8], Header);

    fn deserialize(buffer: &'a [u8]) -> anyhow::Result<Self::Item> {
        let (buffer, fti) = FileTypeIdentifier::deserialize(buffer)?;
        let (buffer, header_1) = Headers::deserialize(buffer)?;
        let (buffer, header_2) = Headers::deserialize(buffer)?;
        let (buffer, rt_1) = RTHeader::deserialize(buffer)?;
        let (buffer, rt_2) = RTHeader::deserialize(buffer)?;

        Ok((buffer, Header::new(fti, header_1, header_2, rt_1, rt_2)))
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn should_deserialize_rth() {
        // FTI
        let mut b_fti = vec![
            0x76, 0x68, 0x64, 0x78, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x00, 0x69, 0x00, 0x63, 0x00,
            0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00,
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00,
            0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x31, 0x00,
            0x39, 0x00, 0x30, 0x00, 0x34, 0x00, 0x35, 0x00, 0x2e, 0x00, 0x30,
        ];

        b_fti.resize(64000, 0);

        // 2 header sections
        let mut b_header_1 = vec![
            0x68, 0x65, 0x61, 0x64, 0x6c, 0xef, 0x07, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xcc, 0xe0, 0x65, 0xb3, 0xaa, 0xf1, 0xd8, 0x4b, 0x9c, 0x8d, 0x16, 0x09,
            0xd9, 0x38, 0xb5, 0xec, 0x59, 0xe3, 0xca, 0x76, 0xef, 0xf9, 0xab, 0x45, 0xad, 0x4a,
            0x77, 0xda, 0xae, 0xce, 0xf6, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        b_header_1.resize(64000, 0);

        let mut b_header_2 = b_header_1.clone();

        let mut b_region_table_1 = vec![
            0x72, 0x65, 0x67, 0x69, 0xae, 0x8c, 0x6b, 0xc6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x66, 0x77, 0xc2, 0x2d, 0x23, 0xf6, 0x00, 0x42, 0x9d, 0x64, 0x11, 0x5e,
            0x9b, 0xfd, 0x4a, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0xa2, 0x7c, 0x8b, 0x90, 0x47, 0x9a, 0x4b,
            0xb8, 0xfe, 0x57, 0x5f, 0x05, 0x0f, 0x88, 0x6e, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        b_region_table_1.resize(64000, 0);
        let mut b_region_table_2 = b_region_table_1.clone();

        let mut bytes = Vec::new();
        bytes.append(&mut b_fti);
        bytes.append(&mut b_header_1);
        bytes.append(&mut b_header_2);
        bytes.append(&mut b_region_table_1);
        bytes.append(&mut b_region_table_2);

        let (_, header) = Header::deserialize(&bytes).unwrap();

        dbg!(&header);

        assert_eq!("vhdxfile", header.fti.signature);
    }
}
